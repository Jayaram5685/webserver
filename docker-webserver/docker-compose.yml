# Docker Compose configuration file for running multiple web servers
# This file defines how to build, configure, and run our web server containers
# Compose v2 no longer needs a version field; removing to avoid warnings

# Define all the services (containers) that will be created and managed together
# Services allow us to run multiple containers as a single application stack
# This is useful for microservices, development environments, or multi-tier applications
services:
  # Nginx web server service configuration
  # Nginx is a high-performance web server and reverse proxy
  # It's known for its speed, efficiency, and ability to handle many concurrent connections
  nginx:
    # Build the container from a Dockerfile located in the ./nginx directory
    # This tells Docker Compose to look for a Dockerfile in the nginx folder
    # and build a custom image based on that Dockerfile's instructions
    # The build context is relative to the docker-compose.yml file location
    build: ./nginx
    # Port mapping configuration: "host_port:container_port"
    # This maps port 8080 on your local machine to port 80 inside the container
    # Port 80 is the standard HTTP port that Nginx listens on inside the container
    # Port 8080 is chosen to avoid conflicts with other services that might use port 80
    # When you visit http://localhost:8080, traffic will be forwarded to the container's port 80
    ports:
      - "8001:80"
    # Give the container a custom name for easier identification
    # Without this, Docker would generate a random name like "docker-webserver_nginx_1"
    # A custom name makes it easier to reference the container in commands and logs
    container_name: nginx-server

  # Apache web server service configuration
  # Apache is another popular web server, known for its flexibility and extensive module system
  # Having both Nginx and Apache allows for comparison and testing different web server technologies
  apache:
    # Build the container from a Dockerfile located in the ./apache directory
    # Similar to nginx, this creates a custom image based on the Apache Dockerfile
    # Each service can have its own build context and configuration
    build: ./apache
    # Port mapping for Apache: "host_port:container_port"
    # Port 8081 on your local machine maps to port 80 inside the Apache container
    # Using different host ports (8080 for Nginx, 8081 for Apache) prevents port conflicts
    # This allows both web servers to run simultaneously on the same machine
    # You can access Apache at http://localhost:8081 and Nginx at http://localhost:8080
    ports:
      - "8002:80"
    # Custom container name for the Apache server
    # This makes it easy to identify and manage the Apache container separately from Nginx
    # Useful for debugging, logging, and container management operations
    container_name: apache-server

